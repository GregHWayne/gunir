// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "column_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gunir {
namespace io {

namespace {

const ::google::protobuf::Descriptor* ColumnStaticInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnStaticInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnDynamicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnDynamicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnMetaData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ColumnType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_column_5fmetadata_2eproto() {
  protobuf_AddDesc_column_5fmetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "column_metadata.proto");
  GOOGLE_CHECK(file != NULL);
  ColumnStaticInfo_descriptor_ = file->message_type(0);
  static const int ColumnStaticInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStaticInfo, column_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStaticInfo, column_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStaticInfo, column_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStaticInfo, max_repetition_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStaticInfo, max_definition_level_),
  };
  ColumnStaticInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnStaticInfo_descriptor_,
      ColumnStaticInfo::default_instance_,
      ColumnStaticInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStaticInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStaticInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnStaticInfo));
  ColumnDynamicInfo_descriptor_ = file->message_type(1);
  static const int ColumnDynamicInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDynamicInfo, start_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDynamicInfo, length_),
  };
  ColumnDynamicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnDynamicInfo_descriptor_,
      ColumnDynamicInfo::default_instance_,
      ColumnDynamicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDynamicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDynamicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnDynamicInfo));
  ColumnMetaData_descriptor_ = file->message_type(2);
  static const int ColumnMetaData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, static_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, dynamic_info_),
  };
  ColumnMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnMetaData_descriptor_,
      ColumnMetaData::default_instance_,
      ColumnMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnMetaData));
  ColumnType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_column_5fmetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnStaticInfo_descriptor_, &ColumnStaticInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnDynamicInfo_descriptor_, &ColumnDynamicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnMetaData_descriptor_, &ColumnMetaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_column_5fmetadata_2eproto() {
  delete ColumnStaticInfo::default_instance_;
  delete ColumnStaticInfo_reflection_;
  delete ColumnDynamicInfo::default_instance_;
  delete ColumnDynamicInfo_reflection_;
  delete ColumnMetaData::default_instance_;
  delete ColumnMetaData_reflection_;
}

void protobuf_AddDesc_column_5fmetadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025column_metadata.proto\022\013gunir.io\"\247\001\n"
    "\020ColumnStaticInfo\022\024\n\014column_index\030\001 \002(\r\022"
    "\023\n\013column_name\030\002 \002(\t\022,\n\013column_type\030\003 \002("
    "\0162\027.gunir.io.ColumnType\022\034\n\024max_repeti"
    "tion_level\030\004 \002(\r\022\034\n\024max_definition_level"
    "\030\005 \002(\r\";\n\021ColumnDynamicInfo\022\026\n\016start_pos"
    "ition\030\001 \002(\006\022\016\n\006length\030\002 \002(\007\"z\n\016ColumnMet"
    "aData\0222\n\013static_info\030\001 \002(\0132\035.gunir.io"
    ".ColumnStaticInfo\0224\n\014dynamic_info\030\002 \002(\0132"
    "\036.gunir.io.ColumnDynamicInfo*\237\002\n\nColu"
    "mnType\022\022\n\016TYPE_UNDEFINED\020\001\022\016\n\nTYPE_INT32"
    "\020\002\022\016\n\nTYPE_INT64\020\003\022\017\n\013TYPE_UINT32\020\004\022\017\n\013T"
    "YPE_UINT64\020\005\022\017\n\013TYPE_SINT32\020\006\022\017\n\013TYPE_SI"
    "NT64\020\007\022\020\n\014TYPE_FIXED32\020\010\022\020\n\014TYPE_FIXED64"
    "\020\t\022\021\n\rTYPE_SFIXED32\020\n\022\021\n\rTYPE_SFIXED64\020\013"
    "\022\016\n\nTYPE_FLOAT\020\014\022\017\n\013TYPE_DOUBLE\020\r\022\r\n\tTYP"
    "E_BOOL\020\016\022\017\n\013TYPE_STRING\020\017\022\016\n\nTYPE_BYTES\020"
    "\020", 681);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "column_metadata.proto", &protobuf_RegisterTypes);
  ColumnStaticInfo::default_instance_ = new ColumnStaticInfo();
  ColumnDynamicInfo::default_instance_ = new ColumnDynamicInfo();
  ColumnMetaData::default_instance_ = new ColumnMetaData();
  ColumnStaticInfo::default_instance_->InitAsDefaultInstance();
  ColumnDynamicInfo::default_instance_->InitAsDefaultInstance();
  ColumnMetaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_column_5fmetadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_column_5fmetadata_2eproto {
  StaticDescriptorInitializer_column_5fmetadata_2eproto() {
    protobuf_AddDesc_column_5fmetadata_2eproto();
  }
} static_descriptor_initializer_column_5fmetadata_2eproto_;

const ::google::protobuf::EnumDescriptor* ColumnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnType_descriptor_;
}
bool ColumnType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnStaticInfo::kColumnIndexFieldNumber;
const int ColumnStaticInfo::kColumnNameFieldNumber;
const int ColumnStaticInfo::kColumnTypeFieldNumber;
const int ColumnStaticInfo::kMaxRepetitionLevelFieldNumber;
const int ColumnStaticInfo::kMaxDefinitionLevelFieldNumber;
#endif  // !_MSC_VER

ColumnStaticInfo::ColumnStaticInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnStaticInfo::InitAsDefaultInstance() {
}

ColumnStaticInfo::ColumnStaticInfo(const ColumnStaticInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnStaticInfo::SharedCtor() {
  _cached_size_ = 0;
  column_index_ = 0u;
  column_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  column_type_ = 1;
  max_repetition_level_ = 0u;
  max_definition_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnStaticInfo::~ColumnStaticInfo() {
  SharedDtor();
}

void ColumnStaticInfo::SharedDtor() {
  if (column_name_ != &::google::protobuf::internal::kEmptyString) {
    delete column_name_;
  }
  if (this != default_instance_) {
  }
}

void ColumnStaticInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnStaticInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnStaticInfo_descriptor_;
}

const ColumnStaticInfo& ColumnStaticInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_5fmetadata_2eproto();  return *default_instance_;
}

ColumnStaticInfo* ColumnStaticInfo::default_instance_ = NULL;

ColumnStaticInfo* ColumnStaticInfo::New() const {
  return new ColumnStaticInfo;
}

void ColumnStaticInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    column_index_ = 0u;
    if (has_column_name()) {
      if (column_name_ != &::google::protobuf::internal::kEmptyString) {
        column_name_->clear();
      }
    }
    column_type_ = 1;
    max_repetition_level_ = 0u;
    max_definition_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnStaticInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 column_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_index_)));
          set_has_column_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column_name;
        break;
      }
      
      // required string column_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->column_name().data(), this->column_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_column_type;
        break;
      }
      
      // required .gunir.io.ColumnType column_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (gunir::io::ColumnType_IsValid(value)) {
            set_column_type(static_cast< gunir::io::ColumnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_repetition_level;
        break;
      }
      
      // required uint32 max_repetition_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_repetition_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_repetition_level_)));
          set_has_max_repetition_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_definition_level;
        break;
      }
      
      // required uint32 max_definition_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_definition_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_definition_level_)));
          set_has_max_definition_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnStaticInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 column_index = 1;
  if (has_column_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->column_index(), output);
  }
  
  // required string column_name = 2;
  if (has_column_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_name().data(), this->column_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->column_name(), output);
  }
  
  // required .gunir.io.ColumnType column_type = 3;
  if (has_column_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->column_type(), output);
  }
  
  // required uint32 max_repetition_level = 4;
  if (has_max_repetition_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_repetition_level(), output);
  }
  
  // required uint32 max_definition_level = 5;
  if (has_max_definition_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_definition_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnStaticInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 column_index = 1;
  if (has_column_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->column_index(), target);
  }
  
  // required string column_name = 2;
  if (has_column_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_name().data(), this->column_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->column_name(), target);
  }
  
  // required .gunir.io.ColumnType column_type = 3;
  if (has_column_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->column_type(), target);
  }
  
  // required uint32 max_repetition_level = 4;
  if (has_max_repetition_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_repetition_level(), target);
  }
  
  // required uint32 max_definition_level = 5;
  if (has_max_definition_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_definition_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnStaticInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 column_index = 1;
    if (has_column_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_index());
    }
    
    // required string column_name = 2;
    if (has_column_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_name());
    }
    
    // required .gunir.io.ColumnType column_type = 3;
    if (has_column_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->column_type());
    }
    
    // required uint32 max_repetition_level = 4;
    if (has_max_repetition_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_repetition_level());
    }
    
    // required uint32 max_definition_level = 5;
    if (has_max_definition_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_definition_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnStaticInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnStaticInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnStaticInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnStaticInfo::MergeFrom(const ColumnStaticInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column_index()) {
      set_column_index(from.column_index());
    }
    if (from.has_column_name()) {
      set_column_name(from.column_name());
    }
    if (from.has_column_type()) {
      set_column_type(from.column_type());
    }
    if (from.has_max_repetition_level()) {
      set_max_repetition_level(from.max_repetition_level());
    }
    if (from.has_max_definition_level()) {
      set_max_definition_level(from.max_definition_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnStaticInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnStaticInfo::CopyFrom(const ColumnStaticInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnStaticInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ColumnStaticInfo::Swap(ColumnStaticInfo* other) {
  if (other != this) {
    std::swap(column_index_, other->column_index_);
    std::swap(column_name_, other->column_name_);
    std::swap(column_type_, other->column_type_);
    std::swap(max_repetition_level_, other->max_repetition_level_);
    std::swap(max_definition_level_, other->max_definition_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnStaticInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnStaticInfo_descriptor_;
  metadata.reflection = ColumnStaticInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnDynamicInfo::kStartPositionFieldNumber;
const int ColumnDynamicInfo::kLengthFieldNumber;
#endif  // !_MSC_VER

ColumnDynamicInfo::ColumnDynamicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnDynamicInfo::InitAsDefaultInstance() {
}

ColumnDynamicInfo::ColumnDynamicInfo(const ColumnDynamicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnDynamicInfo::SharedCtor() {
  _cached_size_ = 0;
  start_position_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnDynamicInfo::~ColumnDynamicInfo() {
  SharedDtor();
}

void ColumnDynamicInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnDynamicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnDynamicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnDynamicInfo_descriptor_;
}

const ColumnDynamicInfo& ColumnDynamicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_5fmetadata_2eproto();  return *default_instance_;
}

ColumnDynamicInfo* ColumnDynamicInfo::default_instance_ = NULL;

ColumnDynamicInfo* ColumnDynamicInfo::New() const {
  return new ColumnDynamicInfo;
}

void ColumnDynamicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_position_ = GOOGLE_ULONGLONG(0);
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnDynamicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 start_position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &start_position_)));
          set_has_start_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_length;
        break;
      }
      
      // required fixed32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnDynamicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 start_position = 1;
  if (has_start_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->start_position(), output);
  }
  
  // required fixed32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnDynamicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 start_position = 1;
  if (has_start_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->start_position(), target);
  }
  
  // required fixed32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnDynamicInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 start_position = 1;
    if (has_start_position()) {
      total_size += 1 + 8;
    }
    
    // required fixed32 length = 2;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnDynamicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnDynamicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnDynamicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnDynamicInfo::MergeFrom(const ColumnDynamicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_position()) {
      set_start_position(from.start_position());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnDynamicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnDynamicInfo::CopyFrom(const ColumnDynamicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnDynamicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ColumnDynamicInfo::Swap(ColumnDynamicInfo* other) {
  if (other != this) {
    std::swap(start_position_, other->start_position_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnDynamicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnDynamicInfo_descriptor_;
  metadata.reflection = ColumnDynamicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnMetaData::kStaticInfoFieldNumber;
const int ColumnMetaData::kDynamicInfoFieldNumber;
#endif  // !_MSC_VER

ColumnMetaData::ColumnMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnMetaData::InitAsDefaultInstance() {
  static_info_ = const_cast< ::gunir::io::ColumnStaticInfo*>(&::gunir::io::ColumnStaticInfo::default_instance());
  dynamic_info_ = const_cast< ::gunir::io::ColumnDynamicInfo*>(&::gunir::io::ColumnDynamicInfo::default_instance());
}

ColumnMetaData::ColumnMetaData(const ColumnMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnMetaData::SharedCtor() {
  _cached_size_ = 0;
  static_info_ = NULL;
  dynamic_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnMetaData::~ColumnMetaData() {
  SharedDtor();
}

void ColumnMetaData::SharedDtor() {
  if (this != default_instance_) {
    delete static_info_;
    delete dynamic_info_;
  }
}

void ColumnMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnMetaData_descriptor_;
}

const ColumnMetaData& ColumnMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_5fmetadata_2eproto();  return *default_instance_;
}

ColumnMetaData* ColumnMetaData::default_instance_ = NULL;

ColumnMetaData* ColumnMetaData::New() const {
  return new ColumnMetaData;
}

void ColumnMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_static_info()) {
      if (static_info_ != NULL) static_info_->::gunir::io::ColumnStaticInfo::Clear();
    }
    if (has_dynamic_info()) {
      if (dynamic_info_ != NULL) dynamic_info_->::gunir::io::ColumnDynamicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gunir.io.ColumnStaticInfo static_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_static_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dynamic_info;
        break;
      }
      
      // required .gunir.io.ColumnDynamicInfo dynamic_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dynamic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dynamic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gunir.io.ColumnStaticInfo static_info = 1;
  if (has_static_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->static_info(), output);
  }
  
  // required .gunir.io.ColumnDynamicInfo dynamic_info = 2;
  if (has_dynamic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dynamic_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gunir.io.ColumnStaticInfo static_info = 1;
  if (has_static_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->static_info(), target);
  }
  
  // required .gunir.io.ColumnDynamicInfo dynamic_info = 2;
  if (has_dynamic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dynamic_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnMetaData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gunir.io.ColumnStaticInfo static_info = 1;
    if (has_static_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->static_info());
    }
    
    // required .gunir.io.ColumnDynamicInfo dynamic_info = 2;
    if (has_dynamic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dynamic_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnMetaData::MergeFrom(const ColumnMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_static_info()) {
      mutable_static_info()->::gunir::io::ColumnStaticInfo::MergeFrom(from.static_info());
    }
    if (from.has_dynamic_info()) {
      mutable_dynamic_info()->::gunir::io::ColumnDynamicInfo::MergeFrom(from.dynamic_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnMetaData::CopyFrom(const ColumnMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_static_info()) {
    if (!this->static_info().IsInitialized()) return false;
  }
  if (has_dynamic_info()) {
    if (!this->dynamic_info().IsInitialized()) return false;
  }
  return true;
}

void ColumnMetaData::Swap(ColumnMetaData* other) {
  if (other != this) {
    std::swap(static_info_, other->static_info_);
    std::swap(dynamic_info_, other->dynamic_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnMetaData_descriptor_;
  metadata.reflection = ColumnMetaData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace io
}  // namespace gunir

// @@protoc_insertion_point(global_scope)
